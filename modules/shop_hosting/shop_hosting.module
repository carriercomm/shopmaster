<?php
/**
 * @file
 * shop_hosting.module
 */

include('shop_hosting.sshkey.inc');

/**
 * Implements hook_perm()
 */
function shop_hosting_perm(){
  return array('access all servers');
}

/**
 * Implements hook_nodeapi_TYPE_OP()
 * CHEF NODE ATTRIBUTES get loaded in here.
 * Load attributes into our server node here.
 */
function shop_hosting_nodeapi_server_load(&$node) {
  
  // Only load special things if this server has a role.
  //if (empty($node->field_chef_role[0]['value'])){
  //  return;
  //}
  // Build attributes object
  $node->attributes = new stdClass;
  $uids = array();
  
  // Technically, we should inclue user 1 since they too can "access all servers"
  $uids[1] = 1;

  // Add server users: any users that can "access all servers"
  $sql = "SELECT u.uid, u.name FROM users u
  INNER JOIN users_roles ur ON u.uid = ur.uid
  INNER JOIN permission p ON ur.rid = p.rid
  WHERE p.perm like '%%%s%%'";
  $results = db_query($sql, 'access all servers');
  while ($result = db_fetch_object($results)) {
    $uids[$result->uid] = $result->uid;
  }
  
  // Get users from the field
  if (!empty($node->field_server_users[0]['uid'])){
    foreach ($node->field_server_users as $data){
      $uids[$data['uid']] = $data['uid'];
    }
  }

  // for all found UIDs, load up their SSH keys
  $all_keys = array();
  foreach ($uids as $uid){
    $account = user_load($uid);
    $account_keys = array();
    $keys = sshkey_load_all_by_entity('user', $account->uid);
    foreach ($keys as $key){
      $all_keys[] = $key->value;
      $account_keys[] = $key->value;
    }
    // Adding each users authorized key.  Each item in this array gets a server account.
    $node->attributes->devudo['users'][$account->name] = implode("\n", $account_keys);
  }
  
  // Add this servers public key to devudo user.
  $node->attributes->devudo['users']['devudo'] = variable_get('shopmaster_ssh_public_key', '');

  // Load server info
  $info = db_query('SELECT * from {devudo_server_info} WHERE nid = %d', $node->nid);
  $node->devudo_server_info = db_fetch_object($info);
  $node->rackspace_id = $node->devudo_server_info->rackspace_id;
  
  // Adding the author of the node as the admin user on the devshop
  $account = user_load($node->uid);
  $node->attributes->aegir['client_email'] = $account->mail;
  
  // Authorized Keys to add to aegir user
  $node->attributes->aegir['authorized_keys'] = implode("\n", $all_keys);
  
  // If there is a devmaster parent, load the attributes needed to connect
  if (!empty($node->field_parent_devmaster[0]['nid'])){
    $parent_server = node_load($node->field_parent_devmaster[0]['nid']);
    $ip = $parent_server->ip_addresses[0];
    $node->attributes->devudo['devmaster_parent_ip'] =  $ip;
  }
  
  // Flavor, Role, etc.
  $node->attributes->devudo['rackspace_flavor'] = $node->field_rackspace_flavor[0]['value'];
  $node->attributes->devudo['rackspace_image'] = variable_get('devudo_rackspace_image' , 'e4dbdba7-b2a4-4ee5-8e8f-4595b6d694ce');
  $node->attributes->devudo['chef_role'] = $node->field_chef_role[0]['value'];
  
  // PHP Memory Limit
  $node->attributes->php['tuneable']['memory_limit'] = $node->field_chef_php_memory_limit[0]['value'];
  
  // NewRelic
  if (!empty($node->field_attr_newrelic_apikey[0]['value'])){
    $node->attributes->newrelic['server_monitoring']['license'] = (string) $node->field_attr_newrelic_apikey[0]['value'];
    $node->attributes->newrelic['application_monitoring']['license'] = (string) $node->field_attr_newrelic_apikey[0]['value'];  
  }
}

/**
 * Implements hook_form_alter().
 */
function shop_hosting_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'server_node_form') {

    // Rackspace ID: only shown if something went wrong.
    // @TODO: If the server is still being verified, set to hidden
    $form['rackspace_id'] = array(
      '#title' => t('Rackspace Server ID'),
      '#description' => t('This is normally autopopulated upon successful server creation.  If not, you can enter it here.'),
      '#type' => empty($form['#node']->rackspace_id) && !empty($form['#node']->nid)? 'textfield': 'hidden',
      '#default_value' => $form['#node']->rackspace_id,
    );
    
    // Hide some things
    if ($form['#node']->nid){
      $form['title']['#access'] = FALSE;
      $form['field_chef_role']['#access'] = FALSE;
      $form['field_rackspace_flavor']['#access'] = FALSE;
      $form['field_parent_devmaster']['#access'] = FALSE;
    }
    
    // Always hide IPs
    $form['ip_addresses']['#access'] = FALSE;
    
    // If there is no server info, tell the update function to insert.
    if (empty($form['#node']->devudo_server_info)){
      $form['devudo_needs_insert'] = array(
        '#type' => 'value',
        '#value' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_hosting_tasks()
 */
function shop_hosting_hosting_tasks() {
  $tasks = array(
    'server' => array(
      'delete' => array(
        'title' => t('Delete'), 
        'description' => t('Destroy this server.'), 
        'dialog' => TRUE,
      ),
    ),
  );
  return $tasks;
}

/**
 * Implements hook_hosting_tasks()
 */
function shop_hosting_hosting_tasks_alter(&$tasks) {

  // On a server node page, hide delete and verify tasks
  $node = menu_get_object();
  if ($node->type == 'server' && $node->status != 1){
    $tasks['server']['verify']['hidden'] =  TRUE;
    $tasks['server']['delete']['hidden'] =  TRUE;
  }
}

/**
 * Implements hook_nodeapi_TYPE_OP()
 * Load attributes into our server node here.
 */
function shop_hosting_nodeapi_server_insert(&$node){
  // Notify me when a new server gets added... We still have to
  // do manual DNS!!
  // @TODO: Add notifications or rules or some module to do this.
  //$subject =  "[DEVUDO] A new server has been created: $node->title";
  //$body = "Someone created $node->title.  Please visit http://mycloud.rackspace.com to add a DNS entry for the server that gets created.";
  //$to = 'jon@thinkdrop.net';
  //mail($to, $subject, $body);

  db_query('INSERT INTO {devudo_server_info} (rackspace_id, nid) VALUES ("%s", %d)', $node->rackspace_id, $node->nid);
  
  // WTF is cck doing here?? my data isn't available until the node is saved again
  cache_clear_all('*', 'cache_content', TRUE);
}

/**
 * Implements hook_nodeapi_TYPE_OP()
 * Load attributes into our server node here.
 */
function shop_hosting_nodeapi_server_update(&$node){
  if (!empty($node->rackspace_id)){
    if (isset($node->devudo_needs_insert)){
      shop_hosting_nodeapi_server_insert($node);
    } else {
      db_query('UPDATE {devudo_server_info} SET rackspace_id = "%s" WHERE nid = %d', $node->rackspace_id, $node->nid);
    }
  }
}


/**
 * Implements hook_nodeapi_TYPE_OP()
 */
function shop_hosting_nodeapi_server_view(&$node){
  
  // Rough display of attributes.
  //$node->content['attributes'] = array(
  //  '#type' => 'item',
  //  '#title' => t('Chef Attributes'),
  //  '#value' => kpr($node->attributes, 1),
  //);
  
  // Show users who have been granted access
  $users = array_keys($node->attributes->devudo['users']);
  $users_links = array();
  
  foreach ($users as $username){
    if ($username != 'devudo') {
      $account = user_load(array('name' => $username));
      $users_links[$username] = theme_username($account);  
    }
  }
  $node->content['users'] = array(
    '#type' => 'item',
    '#title' => t('Users'),
    '#value' => theme('item_list', $users_links),
    '#description' => t('All administrators of this site and the creator of this server are granted access.'),
  );
  
  // Show rackspace server ID
   $node->content['rackspace_id'] = array(
    '#type' => 'item',
    '#title' => t('Rackspace Server ID'),
    '#value' => empty($node->devudo_server_info->rackspace_id)? t('Unknown'): $node->devudo_server_info->rackspace_id,
    '#description' => t('The rackspace cloud server id.'),
  );
   
  // Show a nice link
  $url = "http://$node->title";
  $node->content['link'] = array(
    '#type' => 'item',
    '#title' => t('Goto'),
    '#value' => l($url, $url, array('attributes' => array('target' => '_blank'))),
    '#description' => t('The URL of this Devudo DevShop.'),
    '#weight' => -10,
  );
  
  
  // SHOW TIP IF PUBLIC KEY IS NOT AVAILABLE
  // Display helpful tips for connecting.
  $pubkey = variable_get('shopmaster_ssh_public_key', '');
  
  // If we don't yet have the server's public key saved as a variable...
  if (empty($pubkey)){
    $output = t("Please save this server's public key to a variable.  On your server, run the following command and then reload this page..");
    $command = 'drush @hostmaster vset shopmaster_ssh_public_key "$(cat ~/.ssh/id_rsa.pub)" --yes';

    $output .= "<div class='command'><input size='160' value='$command' onclick='this.select()' /></div>";
  } else {
    $output = t('Ready');
  }
  
   $node->content['connect'] = array(
    '#type' => 'item',
    '#title' => t('Shopmaster Access'),
    '#description' => $output,
  );
  
}
